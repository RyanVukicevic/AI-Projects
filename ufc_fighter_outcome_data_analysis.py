# -*- coding: utf-8 -*-
"""UFC Fighter Outcome Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xHm2OnhayTF4Cvwvnem_z7BQgR6EVpZK

# Import and Loading Data
"""

import numpy as np
import pandas as pd
import sklearn as skl
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

file_path = "/content/drive/My Drive/ufc.csv"

import pandas as pd
df = pd.read_csv(file_path)

"""# Function Dictionary"""

#titleFightStats(str=None), takes a single weightclass in the form "Flyweight", "Bantamweight", etc. or no parameter, in which case it prints stats across all weight classes

#titleFightSummary(), gets data from titleFightStats(), gives the max/min for each stat and weightclass, as well as the avg across all weightclasses

#WL(), based on win/loss ratio, gives the stats for red and blue using bayes conditional probality, treating the wl ratio as a given

#finishPercentages(), gives the percentage of specific finish / all, specific submission / all submissions, and specific ko/tko / all ko/tko's

#finishCounts(), gives counts of all finishes, all submissions, all tko/ko's

#finishProbability()

#finishesByRound()

#reach()

#height()

#heightAndReach()

"""# Ideas"""

#only for male fights
df = df[df["Gender"]=="MALE"]

cols = df.columns
cols = list(cols)

#lists to categorize the cols
blue = [col for col in cols if "Blue" in col]
red = [col for col in cols if "Red" in col]
odds = [col for col in cols if "Odds" in col]
weight = [col for col in cols if "weight" in col]


for col in cols:
    print(col)

#Gender, FinishDetails, BetterRank, Finish, FinishRound, FinishRoundTime,
#HeightDif, ReachDif, TotalTitleBoutDif, KODif, SubDif, TotalFightTimeSecs

#1. when a finish happens, see the finish details

#2. see stats for when the fighter has a better rank, how often they actually win

#3. see the distribution of when finishes happen and plot with seaborn, can do per weightclass too

#4. see how often the taller fighter wins

#5. see how often the fighter with the longer reach wins

#6. see how often the taller fighter actually has the longer reach

#7. see whos got the most subs or ko/tkos's in whole org and by weightclass

#8. see how often the favorite actually wins

# print(odds)
# print(blue)
# print(red)
# print(weight)

"""# Title Fights"""

#defined globally so i can refer to this
titleFights = df[df['TitleBout'] == True]

titleSummary = {
      'Champion Wins %': {
          'Flyweight': 68, 'Bantamweight': 67, 'Featherweight': 77, 'Lightweight': 63,
          'Welterweight': 69, 'Middleweight': 55, 'Light Heavyweight': 73, 'Heavyweight': 56
      },
      'Champion Wins by Finish %': {
          'Flyweight': 65, 'Bantamweight': 55, 'Featherweight': 44, 'Lightweight': 59,
          'Welterweight': 25, 'Middleweight': 56, 'Light Heavyweight': 46, 'Heavyweight': 80
      },
      'Champion Wins by KO/TKO %': {
          'Flyweight': 24, 'Bantamweight': 45, 'Featherweight': 35, 'Lightweight': 23,
          'Welterweight': 17, 'Middleweight': 39, 'Light Heavyweight': 32, 'Heavyweight': 53
      },
      'Champion Wins by Submission %': {
          'Flyweight': 41, 'Bantamweight': 10, 'Featherweight': 9, 'Lightweight': 36,
          'Welterweight': 8, 'Middleweight': 17, 'Light Heavyweight': 14, 'Heavyweight': 27
      },
      'Challenger Wins %': {
          'Flyweight': 32, 'Bantamweight': 33, 'Featherweight': 23, 'Lightweight': 37,
          'Welterweight': 31, 'Middleweight': 45, 'Light Heavyweight': 27, 'Heavyweight': 44
      },
      'Challenger Wins by Finish %': {
          'Flyweight': 50, 'Bantamweight': 50, 'Featherweight': 56, 'Lightweight': 46,
          'Welterweight': 36, 'Middleweight': 66, 'Light Heavyweight': 88, 'Heavyweight': 83
      },
      'Challenger Wins by KO/TKO %': {
          'Flyweight': 2, 'Bantamweight': 5, 'Featherweight': 4, 'Lightweight': 4,
          'Welterweight': 3, 'Middleweight': 8, 'Light Heavyweight': 4, 'Heavyweight': 9
      },
      'Challenger Wins by Submission %': {
          'Flyweight': 25, 'Bantamweight': 0, 'Featherweight': 0, 'Lightweight': 15,
          'Welterweight': 9, 'Middleweight': 13, 'Light Heavyweight': 38, 'Heavyweight': 8
      }
  }

dfTitle = pd.DataFrame(titleSummary)

"""## Title Fight Stats"""

#parameter is a type hint that if one exists, should be a str but if no param, then set to None and handle accordingly
def titleFightStats(weightClass: str=None) -> None:

  if weightClass != None:
    titleFightSubset = titleFights[titleFights["WeightClass"]==weightClass]
    print("WEIGHTCLASS:", weightClass)
  else:
    titleFightSubset = titleFights
    print("ALL TITLE FIGHTS:")

  print()

  championWins = titleFightSubset[titleFightSubset['Winner']=='Red']
  challengerWins = titleFightSubset[titleFightSubset['Winner']=='Blue']

  championWinsLen = len(championWins)
  challengerWinsLen = len(challengerWins)
  titleFightsLen = len(titleFightSubset)

  print("title fights:", titleFightsLen)
  print("champion wins: %d\nchallenger wins: %d\n" % (championWinsLen, challengerWinsLen))

  print("champion wins", int(round(championWinsLen/titleFightsLen,2)*100), "% of the time")
  print("challenger wins", int(round(challengerWinsLen/titleFightsLen,2)*100), "% of the time")
  print()

  championWinsKOorTKO = (championWins["Finish"]=="KO/TKO").sum()
  championWinsSub = (championWins["Finish"]=="SUB").sum()

  challengerWinsKOorTKO = (challengerWins["Finish"]=="KO/TKO").sum()
  challengerWinsSub = (challengerWins["Finish"]=="SUB").sum()

  championKOPerc = int(round(championWinsKOorTKO/championWinsLen,2)*100)
  championSubPerc = int(round(championWinsSub/championWinsLen,2)*100)
  challengerKOPerc = int(round(challengerWinsKOorTKO/challengerWinsLen,2)*100)
  challengerSubPerc = int(round(challengerWinsSub/challengerWinsLen,2)*100)

  print('champion wins by finish', championKOPerc+championSubPerc, "% of the time")
  print("of those finishes:")
  print("champion wins by ko/tko:", championKOPerc, "% of the time")
  print("champion wins by submission:", championSubPerc, "% of the time")
  print()
  print('challenger wins by finish', challengerKOPerc+challengerSubPerc, "% of the time")
  print("of those finishes:")
  print("challenger wins by ko/tko:", challengerWinsKOorTKO, "% of the time")
  print("challenger wins by submission:", challengerSubPerc, "% of the time\n")

  #block of prints for str formatting after subsequent calls of this/other functions
  for i in range(1, 4):
    print()

"""## Title Fight Summary"""

def titleFightSummary()-> None:
    for col in dfTitle.columns:
      print(col)
      print("avg:", dfTitle[col].mean())
      print("max:", dfTitle[col].max(), "% at weight class:", dfTitle[col].idxmax())
      print("min:", dfTitle[col].min(), "% at weight class:", dfTitle[col].idxmin())
      print()

    for i in range(1, 4):
      print()

"""# Win/Loss Ratio Consideration"""

#compare who on higher ws

df["BlueWL"] = df.apply(lambda row: row["BlueWins"] / row["BlueLosses"] if row["BlueLosses"] != 0 else row["BlueWins"], axis=1)
df["RedWL"] = df.apply(lambda row: row["RedWins"] / row["RedLosses"] if row["RedLosses"] != 0 else row["RedWins"], axis=1)

df["BlueWL"] = df["BlueWL"].round(2)
df["RedWL"] = df["RedWL"].round(2)

# np.where specifies up to 3 args, case1, case2, or neither, which here is a tie, used for finding better w/l ratio
df["BetterWL"] = np.where(df["RedWL"] > df["BlueWL"], "Red", np.where(df["RedWL"] < df["BlueWL"], "Blue", "Tie"))

df[["RedWL", "BlueWL", "BetterWL"]]

RedBetterWL = df[df["BetterWL"] == "Red"]
BlueBetterWL = df[df["BetterWL"] == "Blue"]

RedBetterWLandWon = RedBetterWL[RedBetterWL["Winner"] == "Red"]
BlueBetterWLandWon = BlueBetterWL[BlueBetterWL["Winner"] == "Blue"]

RedWorseWL = df[df["BetterWL"] == "Blue"]  # Red had worse W/L ratio
BlueWorseWL = df[df["BetterWL"] == "Red"]  # Blue had worse W/L ratio

RedWorseWLandWon = RedWorseWL[RedWorseWL["Winner"] == "Red"]
BlueWorseWLandWon = BlueWorseWL[BlueWorseWL["Winner"] == "Blue"]

TieWL = df[df["BetterWL"] == "Tie"]

RedTieWLandWon = TieWL[TieWL["Winner"] == "Red"]
BlueTieWLandWon = TieWL[TieWL["Winner"] == "Blue"]

"""## Win/Loss"""

def WL() -> None:

  print("There are", len(df), "fights")

  print()

  print("red has the better w/l in", len(RedBetterWL), "of them")
  print("blue has the better w/l in", len(BlueBetterWL), "of them")
  print("w/l ratio is a tie in", len(df[df["BetterWL"] == "Tie"]), "of them")

  print()

  print("given red had a better w/l, they actually won", int(round(len(RedBetterWLandWon) / len(RedBetterWL), 2) * 100), "% of the time")
  print("given blue had a better w/l, they actually won", int(round(len(BlueBetterWLandWon) / len(BlueBetterWL), 2) * 100), "% of the time")

  print()

  print("given red had a worse w/l, they actually won", int(round(len(RedWorseWLandWon) / len(RedWorseWL), 2) * 100), "% of the time")
  print("given blue had a worse w/l, they actually won", int(round(len(BlueWorseWLandWon) / len(BlueWorseWL), 2) * 100), "% of the time")

  print()

  print("given the w/l were equal, and red won", int(round(len(RedTieWLandWon) / len(TieWL), 2) * 100), "% of the time")
  print("given the w/l were equal, and blue won", int(round(len(BlueTieWLandWon) / len(TieWL), 2) * 100), "% of the time")

  for i in range(1,4):
    print()

"""# Finishes"""

df["Finish"].unique()

finishes = df[(df["Finish"]=="SUB") | (df["Finish"]=="KO/TKO")]

submissions = finishes[finishes["Finish"]=="SUB"]
knockouts = finishes[finishes["Finish"]=="KO/TKO"]

submissionsVC = submissions["FinishDetails"].value_counts()
knockoutsVC = knockouts["FinishDetails"].value_counts()

# print(submissionsVC)
# print(knockoutsVC)

#normalize=True takes each type and / by total to get percentages of each

finishPerc = round(finishes["FinishDetails"].value_counts(normalize=True)*100,2)

knockoutPerc = round(knockouts["FinishDetails"].value_counts(normalize=True)*100,2)
submissionPerc = round(submissions["FinishDetails"].value_counts(normalize=True)*100,2)

# Update all rows where NumberOfRounds is 4 to be 3
df.loc[df["NumberOfRounds"] == 4, "NumberOfRounds"] = 3
finishes.loc[finishes["NumberOfRounds"] == 4, "NumberOfRounds"] = 3

finishes["FinishRound"].value_counts()

scheduledFor5 = df[df["NumberOfRounds"]==5]
scheduledFor3 = df[df["NumberOfRounds"]==3]

scheduledFor5andFinish = df[(df["NumberOfRounds"]==5) & ((df["Finish"]=="SUB") | (df["Finish"]=="KO/TKO"))]
scheduledFor3andFinish = df[(df["NumberOfRounds"]==3) & ((df["Finish"]=="SUB") | (df["Finish"]=="KO/TKO"))]

df["EarlyStoppage"] = df.apply(lambda row:
    "True" if row["Finish"] in ["SUB", "KO/TKO"] else
    "False" if row["Finish"] in ["U-DEC", "S-DEC", "M-DEC"] else
    "NA", axis=1)

distance = df[df["EarlyStoppage"]=="False"]

"""##Finish Counts"""

def finishCounts() -> None:

  print("EACH SUBMISSION AND ITS FREQUENCY\n", submissionsVC, "\n")
  print("EACH KO/TKO AND ITS FREQUENCY:\n",knockoutsVC)

  for i in range(1, 4):
    print()

"""## Finish Percentages by Type"""

def finishPercentages() -> None:

  print("EACH FINISH AND ITS PERCENTAGE:\n", finishPerc, "\n")
  print("EACH KNOCKOUT AND ITS PERCENTAGE:\n", knockoutPerc, "\n")
  print("EACH SUBMISSION AND ITS PERCENTAGE:\n", submissionPerc)

#print 3 empty lines
  for i in range(1, 4):
    print()

"""## Finish Probability"""

def finishProbability() -> None:

  print("PROBABILITY THAT A 3-ROUND FIGHT FINISHED EARLY:", int(round(len(scheduledFor3andFinish)/len(scheduledFor3),2)*100), "%")
  print("PROBABILITY THAT A 5-ROUND FIGHT FINISHED EARLY:", int(round(len(scheduledFor5andFinish)/len(scheduledFor5),2)*100), "%")

  for i in range(1, 4):
    print()

"""## Finish Times"""

def finishesByRound() -> None:
    print("PROBABILITY OF A FIGHT ENDING IN A GIVEN ROUND:\n",
          round(df["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

    print("PROBABILITY OF A FIGHT ENDING IN A GIVEN ROUND, GIVEN AN EARLY STOPPAGE:\n",
          round(finishes["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

    print("PROBABILITIES OF FINISH, BY ROUND, IN 3 ROUND FIGHTS:\n",
          round(scheduledFor3["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

    print("PROBABILITIES OF FINISH, BY ROUND, IN 5 ROUND FIGHTS:\n",
          round(scheduledFor5["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

    print("PROBABILITIES OF FINISH, BY ROUND, IN 3 ROUND FIGHTS THAT FINISH EARLY:\n",
          round(scheduledFor3andFinish["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

    print("PROBABILITIES OF FINISH, BY ROUND, IN 5 ROUND FIGHTS THAT FINISH EARLY:\n",
          round(scheduledFor5andFinish["FinishRound"].value_counts(normalize=True).sort_index(ascending=True) * 100, 2), "\n")

"""# Height and Reach"""

inchConv=2.54

df["BlueHeight"] = df["BlueHeightCms"] /inchConv
df["BlueReach"] = df["BlueReachCms"] / inchConv

df["RedHeight"] = df["RedHeightCms"] / inchConv
df["RedReach"] = df["RedReachCms"] / inchConv

df[["BlueHeight", "RedHeight", "BlueReach", "RedReach"]] = df[["BlueHeight", "RedHeight", "BlueReach", "RedReach"]].round(0)

df["ReachAdvantage"] = np.where(df["BlueReach"] > df["RedReach"], "Blue",
                         np.where(df["BlueReach"] < df["RedReach"], "Red", "Equal"))

df["HeightAdvantage"] = np.where(df["BlueHeight"] > df["RedHeight"], "Blue",
                          np.where(df["BlueHeight"] < df["RedHeight"], "Red", "Equal"))


df["ReachAdvantage"].value_counts()
df["HeightAdvantage"].value_counts()


reachAdvAndWon = df[((df["Winner"]=="Red") & (df["ReachAdvantage"]=="Red")) | ((df["Winner"]=="Blue") & (df["ReachAdvantage"]=="Blue"))]
reachAdvAndLost = df[((df["Winner"]=="Red") & (df["ReachAdvantage"]=="Blue")) | ((df["Winner"]=="Blue") & (df["ReachAdvantage"]=="Red"))]
equalReach = df[df["ReachAdvantage"]=="Equal"]


heightAdvAndWon = df[((df["Winner"]=="Red") & (df["HeightAdvantage"]=="Red")) | ((df["Winner"]=="Blue") & (df["HeightAdvantage"]=="Blue"))]
heightAdvAndLost = df[((df["Winner"]=="Red") & (df["HeightAdvantage"]=="Blue")) | ((df["Winner"]=="Blue") & (df["HeightAdvantage"]=="Red"))]
equalHeight = df[df["HeightAdvantage"]=="Equal"]


#reinitialize these so they have reach and height advs
finishes = df[(df["Finish"]=="SUB") | (df["Finish"]=="KO/TKO")]
submissions = finishes[finishes["Finish"]=="SUB"]
knockouts = finishes[finishes["Finish"]=="KO/TKO"]

#knockouts

reachAdvAndWonKOs = knockouts[((knockouts["Winner"]=="Red") & (knockouts["ReachAdvantage"]=="Red")) | ((knockouts["Winner"]=="Blue") & (knockouts["ReachAdvantage"]=="Blue"))]
reachAdvAndLostKOs = knockouts[((knockouts["Winner"]=="Red") & (knockouts["ReachAdvantage"]=="Blue")) | ((knockouts["Winner"]=="Blue") & (knockouts["ReachAdvantage"]=="Red"))]
equalReachKOs = knockouts[knockouts["ReachAdvantage"]=="Equal"]

heightAdvAndWonKOs = knockouts[((knockouts["Winner"]=="Red") & (knockouts["HeightAdvantage"]=="Red")) | ((knockouts["Winner"]=="Blue") & (knockouts["HeightAdvantage"]=="Blue"))]
heightAdvAndLostKOs = knockouts[((knockouts["Winner"]=="Red") & (knockouts["HeightAdvantage"]=="Blue")) | ((knockouts["Winner"]=="Blue") & (knockouts["HeightAdvantage"]=="Red"))]
equalHeightKOs = knockouts[knockouts["HeightAdvantage"]=="Equal"]


#submissions

reachAdvAndWonSubs = submissions[((submissions["Winner"]=="Red") & (submissions["ReachAdvantage"]=="Red")) | ((submissions["Winner"]=="Blue") & (submissions["ReachAdvantage"]=="Blue"))]
reachAdvAndLostSubs = submissions[((submissions["Winner"]=="Red") & (submissions["ReachAdvantage"]=="Blue")) | ((submissions["Winner"]=="Blue") & (submissions["ReachAdvantage"]=="Red"))]
equalReachSubs = submissions[submissions["ReachAdvantage"]=="Equal"]

heightAdvAndWonSubs = submissions[((submissions["Winner"]=="Red") & (submissions["HeightAdvantage"]=="Red")) | ((submissions["Winner"]=="Blue") & (submissions["HeightAdvantage"]=="Blue"))]
heightAdvAndLostSubs = submissions[((submissions["Winner"]=="Red") & (submissions["HeightAdvantage"]=="Blue")) | ((submissions["Winner"]=="Blue") & (submissions["HeightAdvantage"]=="Red"))]
equalHeightSubs = submissions[submissions["HeightAdvantage"]=="Equal"]

#reach and height adv

reachAndHeightAdv = df[((df["ReachAdvantage"]=="Red") & (df["HeightAdvantage"]=="Red")) | ((df["ReachAdvantage"]=="Blue") & (df["HeightAdvantage"]=="Blue"))]
oneAdvEach = df[((df["ReachAdvantage"]=="Red") & (df["HeightAdvantage"]=="Blue")) | ((df["ReachAdvantage"]=="Blue") & (df["HeightAdvantage"]=="Red"))]
reachAdvAndEqualHeight = df[((df["ReachAdvantage"]=="Red") & (df["HeightAdvantage"]=="Equal")) | ((df["ReachAdvantage"]=="Blue") & (df["HeightAdvantage"]=="Equal"))]
heightAdvAndEqualReach = df[((df["ReachAdvantage"]=="Equal") & (df["HeightAdvantage"]=="Red")) | ((df["ReachAdvantage"]=="Equal") & (df["HeightAdvantage"]=="Blue"))]
noAdv = df[(df["ReachAdvantage"]=="Equal") & (df["HeightAdvantage"]=="Equal")]

"""##Height"""

def height() -> None:

  print("HEIGHT SUMMARY:")
  print("the fighter with the height advantage wins", round(len(heightAdvAndWon)/len(df)*100, 2), "% of the time")
  print("the fighter with the height advantage loses", round(len(heightAdvAndLost)/len(df)*100, 2), "% of the time")
  print("the height is equal", round(len(equalHeight)/len(df)*100,2), "% of the time")
  print()
  print("HEIGHT SUMMARY (KO's):")
  print("the fighter with the height advantage wins", round(len(heightAdvAndWonKOs)/len(knockouts)*100, 2), "% of the time")
  print("the fighter with the height advantage loses", round(len(heightAdvAndLostKOs)/len(knockouts)*100, 2), "% of the time")
  print("the height is equal", round(len(equalHeightKOs)/len(knockouts)*100,2), "% of the time")
  print()
  print("HEIGHT SUMMARY (Submissions):")
  print("the fighter with the height advantage wins", round(len(heightAdvAndWonSubs)/len(submissions)*100, 2), "% of the time")
  print("the fighter with the height advantage loses", round(len(heightAdvAndLostSubs)/len(submissions)*100, 2), "% of the time")
  print("the height is equal", round(len(equalHeightSubs)/len(submissions)*100,2), "% of the time")

  for i in range(1, 4):
    print()

"""## Reach"""

def reach() -> None:

  print("REACH SUMMARY:")
  print("the fighter with the reach advantage wins", round(len(reachAdvAndWon)/len(df)*100, 2), "% of the time")
  print("the fighter with the reach advantage loses", round(len(reachAdvAndLost)/len(df)*100, 2), "% of the time")
  print("the reach is equal", round(len(equalReach)/len(df)*100,2), "% of the time")
  print()
  print("REACH SUMMARY (KO's):")
  print("the fighter with the reach advantage wins", round(len(reachAdvAndWonKOs)/len(knockouts)*100, 2), "% of the time")
  print("the fighter with the reach advantage loses", round(len(reachAdvAndLostKOs)/len(knockouts)*100, 2), "% of the time")
  print("the reach is equal", round(len(equalReachKOs)/len(knockouts)*100,2), "% of the time")
  print()
  print("REACH SUMMARY (Submissions):")
  print("the fighter with the reach advantage wins", round(len(reachAdvAndWonSubs)/len(submissions)*100, 2), "% of the time")
  print("the fighter with the reach advantage loses", round(len(reachAdvAndLostSubs)/len(submissions)*100, 2), "% of the time")
  print("the reach is equal", round(len(equalReachSubs)/len(submissions)*100,2), "% of the time")

  for i in range(1, 4):
    print()

"""##H/R Distribution"""

def heightAndReach() -> None:

  print("HEIGHT AND REACH DISTRIBUTION:")
  print("the same fighter has both the height and reach advantage", round(len(reachAndHeightAdv) / len(df) * 100, 2), "% of the time")
  print("one fighter has the reach, and the other has the height", round(len(oneAdvEach) / len(df) * 100, 2), "% of the time")
  print("one fighter has the reach advantage, and height is equal", round(len(reachAdvAndEqualHeight) / len(df) * 100, 2), "% of the time")
  print("one fighter has the height advantage, and reach is equal", round(len(heightAdvAndEqualReach) / len(df) * 100, 2), "% of the time")
  print("both the height and reach is equal", round(len(noAdv) / len(df) * 100, 2), "% of the time")

  for i in range(1,4):
    print()

"""# Main"""

titleFightSummary()

# #name explicitly so theyre in ascending order by weight
weightClasses = ["Flyweight", "Bantamweight", "Featherweight", "Lightweight", "Welterweight", "Middleweight", "Light Heavyweight", "Heavyweight"]

titleFightStats()

for weight in weightClasses:
  if weight!="Catch Weight":
    titleFightStats(weight)

WL()

reach()

height()

heightAndReach()

"""# Insights and Summary"""

#TITLE FIGHTS:

  #across the ufc, the champion wins 2/3 of the time
  #half of these wins are by finish, with most of those being ko/tko

  #although the challenger wins less, when they do win, they win by finish 10% more champ-50% vs. chall-60%
  #and of these finishes, their (ko/tko)/submission ratio is higher

  #in summary, while challengers win a lot less, when they do win, its by finish more often, and when they finish, they ko/tko the champ more



#TITLE FIGHTS BY WEIGHTCLASS:

  #general oversights:

  #featherweight/heavyweight most stable for champions (dominant champs: aldo, holloway, volk, and now likely topuria)
  #middleweight/heavyweight least stable for champions (surprising given israel and anderson silva reigned each for a while)
  #lightweight/bantamweight near the lower middle of champion stability, contrary to the narrative of the belt changing hands super often

  #welterweight fights are a decision fest (gsp, usman, woodley, gonna continue with belal)
  #heavyweight finishes a lot, on either side, both 80+%

  #notable stats:

  #light heavyweight: challenger finishes 88%, champion finishes only 46%, about half
  #bantmanweight/featherweight: no challenger has ever won by submission in a title fight
  #flyweight/lightweight: only weightclasses where, when finish occurs, more likely to be a submission
  #in every weight: when challengers win, ko/tko's more likely than submission



#WL:

  #when red's w/l better, they win over 60% of the time
  #when blue's w/l better, they win half the time, lack of experience many times compensates it seems, given title fights red=champion

  #when red's w/l worse, they still win a little over 50% of the time
  #when blue's w/l worse, they win less than 40% of the time, bet on red when blue w/l worse

  #when w/l equal, red wins 56% of time

  #w/l wise, red is always the favorable fighter



#FINISHES:

  #punch/punches are the most common ko/tko's by far, around 50% all finishes and 60% (combined) of all ko/tko's

  #rear naked choke is most common sub by far, 15% all finishes, 40% of all subs

  #guillotine is the only other sub that occurs above 10% of time, comprising around 20% of submissions

  #5 round fights finish more than 3 round fights, but only 10% more. 3 rd (50%) vs. 5 rd (60%)

  #when theres a stoppage, they generally happen earlier, with 50% in 1st round, decaying from then on

  #in 3 rd fights that stop early, over 50% finishes in rd 1
  #if 5 rd fights that stop early, nearly 40% finishes in rd 1